function swapAdjacentBits(n) {
  const bitString = n.toString(2)
  const nAnd32bit01 = parseInt("00000000000000000000000000001010", 2)
  const nAnd32bit10 = parseInt("00000000000000000000000001000000", 2)
  const nAnd32bit01RightShift = nAnd32bit01 >> 1
  const nAnd32bit10LeftShift = nAnd32bit10 << 1
  const nAnd32bit01ORnAnd32bit10 = nAnd32bit01.toString(2) | nAnd32bit10.toString(2)
  const answer = parseInt("00000000000000000000000010000101", 2) 
  console.log({bitString, nAnd32bit01, nAnd32bit10, nAnd32bit01RightShift, nAnd32bit10LeftShift, nAnd32bit01ORnAnd32bit10, answer: 5 | 128})
  return ((n & 0b10101010101010101010101010101010) >> 1)|((n & 0b01010101010101010101010101010101) << 1)
  
}

/* 
00000000000000000000000001001010 --> n
10101010101010101010101010101010 --> 32 bits (10)
00000000000000000000000000001010 --> &  step 1

00000000000000000000000000000101 --> >> 1 (5) step 2
00000000000000000000000010000000 --> << 1 (128) step 4 


00000000000000000000000001000000 --> & step 3
01010101010101010101010101010101 --> 32 bits (01)
00000000000000000000000001001010 --> n

=============================================
00000000000000000000000000000101 --> >> 1  (5)
00000000000000000000000010000000 --> << 1  (128)
00000000000000000000000010000101 --> |  step 5 (133)  ===> Answer
--------------------------------
00000000000000000000000001001010 --> n


*/


console.log(swapAdjacentBits(74))